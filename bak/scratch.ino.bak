#include "MyThread.h"
#include "MyThreadController.h"

#include "Display.h"


#define KILL_SWITCH       A6

#define START_STOP_BUTTON DECIMAL
#define DEC_BUTTON        MIDDLE
#define INC_BUTTON        BOTTOMLEFT
#define MODE_BUTTON       TOPLEFT
#define BUTTONS           WKP

#define KILL       0
#define START_STOP 1
#define DEC        2
#define INC        3
#define MODE       4

#define SCAN_MODE  0
#define SPEED_MODE 1
#define TIME_MODE  2
#define DIST_MODE  3
#define CAL_MODE   4

#define BUZZER            A5

//TODO 
#define TREADMILL    24

MyThreadController threadController = MyThreadController();

MyThread readStartStopThread = MyThread();
MyThread safeThread = MyThread();
MyThread countDownThread = MyThread();
MyThread modeThread = MyThread();
MyThread scanThread = MyThread();
MyThread updateStatusThread = MyThread();

static int ledPins[] = { SCAN_LED, SPEED_LED, TIME_LED, DIST_LED, CAL_LED };
static int digitPins[] = { DIGIT1, DIGIT2, DIGIT3, DIGIT4 };
static int segmentPins[] = { TOP, TOPRIGHT, BOTTOMRIGHT, BOTTOM, BOTTOMLEFT, TOPLEFT, MIDDLE, DECIMAL };
  
static const byte digitCodeMap[] = {
  0b00000000, 0b10000110, 0b00100010, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 
  0b00000010, 0b00011101, 0b00001111, 0b01000000, 0b01000000, 0b10000000, 0b01000000, 
  0b10000000, 0b01010010, 0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 
  0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111, 0b00000000, 0b00000000, 
  0b00011000, 0b01001000, 0b00001100, 0b10100111, 0b00000000, 0b01110111, 0b01111111, 
  0b00011101, 0b00111111, 0b01111001, 0b01110001, 0b01111101, 0b01110110, 0b00110000, 
  0b00011110, 0b01110110, 0b00111000, 0b01001111, 0b00110111, 0b00111111, 0b01110011, 
  0b10111111, 0b01010000, 0b01101101, 0b00000111, 0b00111110, 0b01111110, 0b01001111, 
  0b01110110, 0b01100110, 0b01011011, 0b00011101, 0b01100100, 0b00001111, 0b00100011, 
  0b00001000, 0b00100000, 0b00111000, 0b01110111, 0b01111100, 0b01011000, 0b01011110, 
  0b01111001, 0b01110001, 0b01101111, 0b01110100, 0b00010000, 0b00011110, 0b01110110, 
  0b00110000, 0b01001111, 0b01010100, 0b01011100, 0b01110011, 0b01100111, 0b01010000, 
  0b01101101, 0b01000100, 0b00011100, 0b00011100, 0b01001111, 0b01110110, 0b01101110, 
  0b01011011, 0b00011101, 0b00110000, 0b00001111, 0b01000000 
};

byte digitCodes[4] = { 0b11000000, 0b11000000, 0b11000000, 0b11000000 };
byte ledState = 0b00010001;

int countDownCounter = 3;

boolean running = false;
boolean safe = false;
int mode = SPEED_MODE;
boolean scanning = false;
char *status;

boolean vals[] = { false, false, false, false, false };

Display display = Display(digitPins, ledPins, segmentPins, LEDS);
MyThread refreshDisplayThread = MyThread();

Treadmill treadmill = Treadmill(TREADMILL);
MyThread refreshTreadmillThread = MyThread();

//void refreshDisplay() {
//  display.refresh();
//}

void setChar(int digitNum, char c, boolean decimal) {
  byte digitCode = digitCodeMap[ c - 32 ];
  digitCode = decimal ? digitCode & 0b10000000 : digitCode;
  digitCodes[digitNum] = digitCode;
}

void setChars(String chars, boolean decimals[4]) {
  for (int i = 0; i < 4; i++) {
    setChar(i, chars.charAt(i), decimals[i]);
  }
}

Button startStopButton = Button(START_STOP_BUTTON, BUTTONS, LEDS);
Button incButton = Button(INC_BUTTON BUTTONS, LEDS);
Button decButton = Button(DEC_BUTTON BUTTONS, LEDS);
Button modeButton = Button(MODE_BUTTON BUTTONS, LEDS);

void checkStartStop() {
  if ( startStopButton.isPressed() ) {
    running ? stop() : start();
  }
}

void checkInc() {
  if ( safe && running ) {
    if ( incButton.isPressed() ) {
      mode = SPEED_MODE;
      treadmill.incrementSpeed();
    }
  }
}
void checkDec() {
  if ( safe && running ) {
    if ( decButton.isPressed() ) {
      mode = SPEED_MODE;
      treadmill.decrementSpeed();
    }
  }
}

void checkMode() {
  if (safe && running)
    mode = mode + 1;
}

void initializeThread(MyThread* thread, void (*callback)(void), unsigned long _interval) {
  thread->onRun(callback);
  thread->setInterval(_interval);
  threadController.add(thread);
}

void _setSafeDigits() {
  setChar(0, '-', true);
  setChar(1, '-', true);
  setChar(2, '-', true);
  setChar(3, '-', true);
}

void countDown() {
  setChars("   " + (String)countDownCounter, vals);
  countDownCounter--;
  if (countDownCounter == 0) {
    running = true;
    requestedSpeed = 1.0;
    mode = SPEED_MODE;
    countDownThread.enabled = false;
  }
}

void start() {
  if (safe) {
    if (running) return;
    if (safe) {
      countDownCounter = 3;
      countDownThread.enabled = true;
    }
  }
}

void stop() {
  if (safe) {
    _setSafeDigits();
  }
  running = false;
  requestedSpeed = 0.0;
}

void kill_unsafe() {
  safe = false;
  setChars("SAFE", vals);
  stop();
}
void kill_safe() {
  safe = true;
  if ( !running ) {
    _setSafeDigits();
  }
}
void readKill() {
  readSwitch(KILL, kill_safe, kill_unsafe);
}

int wifiCommand(String command) {
  if ( command == "START" )
    startStop();

  if ( command == "STOP" )
    startStop();

  if ( command == "INC" )
    if ( safe && running ) 
      inc();

  if ( command == "DEC" )
    if ( safe && running ) 
      dec();

  if ( command == "MODE" )
    if ( safe && running ) 
      changeMode();

  return 1;
}

void setup() {
  pinMode(BUZZER, OUTPUT);
  digitalWrite(BUZZER, HIGH);

//   safe = false;
   
  initializeThread(&refreshDisplayThread, display.refresh, 5);
  initializeThread(&refreshTreadmillThread, treadmill.refresh, 1);

  initializeThread(&readStartStopThread, readStartStop, 5);
  initializeThread(&safeThread, readKill, 5);
  initializeThread(&countDownThread, countDown, 1000);
  initializeThread(&scanThread, scan, 3000);
  initializeThread(&updateStatusThread, updateStatus, 10);

  Particle.function("wifiCommand", wifiCommand);
  updateStatus();
  Particle.variable("status", status, STRING);
}

void loop() {
  threadController.run();
}

void main_loop() {
  if ( !safe ) {
    setChars("SAFE", vals);
    stop();
  } else {
    if ( !running) {
      _setSafeDigits();
    } 
  }
} 

void display() {
  _displayMode();
  _displaySpeed();  
}

void _displayMode() {
  for (int i = 0; i < 5; i++)
    setLed(ledPins[i], false);
  setLed(ledPins[SCAN_MODE], scanning);
  setLed(ledPins[mode], true);
}

//TODO fixme
void _displaySpeed() {
//  setChars(printf( "%4s", printf( "%2f", speed )), vals);
  setChars("PEED", vals);
}

void scan() {
  if (safe && running && scanning)
    mode = (mode % 4) + 1;
}

// FIXME
int calories() {
  return 4;
}
int time() {
  return 5;
}
int distance() {
  return 6;
}
void updateStatus() {
  status = (char*)millis();
//  status =
//    printf(
//      "{ \"speed\":%f, \"calories\":%d, \"time\":%d, \"distance\":%d }",
//      speed, calories(), time(), distance() );
}

// display
// refreshSegments
// refreshLeds
// readStartStop
// readInc
// readDec
// readMode
// setSpeed
// kill
// scan
// updateStatus

void readSwitches() {
  readStartStop();
  readInc();
  readDec();
  readMode();
}

void readParticleCommand() {
  //do nothing
}






